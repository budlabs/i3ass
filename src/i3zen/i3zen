#!/bin/bash

: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KING_PID_FILE:=$XDG_RUNTIME_DIR/i3ass/i3king.pid}"

main(){

  declare -g _msgstring _mark _json  _ws_zen \
             _var_zen_current _var_zen_new
  declare -A i3list

  _json=$(i3-msg -t get_tree)
  _mark=${_o[mark]:-centerzen}

  eval "$(i3list --mark "$_mark" --json "$_json")"

  # window was floating: zenCON_ID=WIDTHxHEIGHT+XPOS+YPOS:WORKSPACE_ORIGIN
  # window was tiled:    zenCON_ID=tiled:WORKSPACE_ORIGIN
  _var_zen_current=$(i3var get "zen${i3list[AWC]}")

  ((i3list[AWF])) \
    && _var_zen_new="${i3list[AWW]}x${i3list[AWH]}+${i3list[AWX]}+${i3list[AWY]}:" \
    || _var_zen_new="tiled:"

  _var_zen_new+=${i3list[WAN]}

  # if a container with mark "$_mark" exist
  # WTN is workspace-name where that container is
  if [[ ! ${_ws_zen:=${i3list[WTN]}} ]]; then
    create_zen_workspace

  # APA = active containers parent ID
  # TWC = target container (has mark "$_mark") ID
  elif ((i3list[APA] == i3list[TWC])); then
    unzen_container

  else
    move_to_zen_container
  fi

  ((_o[verbose])) || quite_flag=-q

  [[ $_msgstring ]] && {
    >&2 i3-msg "$quite_flag" "${_msgstring%;}"
    unset _msgstring
  }

  # if origin workspace doesn't exist after zen
  # container is **Automatically** created. we
  # move zen container back to origin(active) workspace. 
  [[ ${_o[workspace]}$_ws_zen ]] || {
    re='"name":"'"${i3list[WAN]}"'",'
    [[ $(i3-msg -t get_workspaces) =~ $re ]] || {

      messy "[con_mark=$_mark]"                 \
            move --no-auto-back-and-forth to workspace "${i3list[WAN]}", \
            workspace --no-auto-back-and-forth "${i3list[WAN]}"

      >&2 i3-msg "$quite_flag" "${_msgstring%;}"
    }
  }
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud
