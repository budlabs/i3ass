#!/bin/bash

main(){

  [[ ${arg_direction:=${1,,}} ]] && { 
    [[ ${arg_direction} =~ ^(l|r|u|d|left|right|up|down)$ ]]  \
      || ERX "i3viswiz: direction ('$arg_direction') is not valid!" \
             "( left|right|up|down|l|r|u|d )"

    shift
    (($#)) && ERX "i3viswiz: expected 0 arguments got '($*)'"
    arg_direction=${arg_direction:0:1}
  }

  : "${_o[json]:=$(i3-msg -t get_tree)}"
  : "${_o[debug]:=LIST}"
  : "${_o[debug-format]:=%k=%v }"
  arg_gap=$((_o[gap] > 0 ? _o[gap] : 5))

  # check if focus_wrap workspace is set
  # by looking for a mark on root container (i3var)
  # if no mark exist, check config, set the mark
  re='^\{"id":([0-9]+)[^[]+\[([^]]*"focus_wrap=([^"]*)"[^]]*)?\]'
  [[ ${_o[json]} =~ $re ]] || {
    i3-msg -t get_config | grep -E 'focus_wrapping\s+workspace' > /dev/null \
      && wrapping=workspace

    i3var set focus_wrap "${wrapping:-normal}"
  }

  for o in instance class conid winid mark title titleformat type role parent; do

    [[ ${_o[$o]} ]] || continue

    case "$o" in
      role        ) json_key=window_role     ;;
      type        ) json_key=window_type     ;;
      titleformat ) json_key=title_format    ;;
      parent      ) json_key=i3fyracontainer ;;
      title       ) json_key=name            ;;
      winid       ) json_key=window          ;;
      *           ) json_key=$o              ;;
    esac

    if [[ ${_o[$o]} = LIST ]]; 
      then arg_list=$json_key
      else begin_block+="arg_search[\"$json_key\"]=\"${_o[$o]}\"; "
    fi

  done

  result=$(
    # <<<    - content of string _o[json] will be input  to command awk
    # -f <() - output of <() will be interpreted as file containg AWK script
    # FS     - change Field  Separator to ":" (from whitespace)
    # RS     - change Record Separator to "," (from linebreak)
    # arg_   - these variables are available in the AWK script
    <<< "${_o[json]}" gawk -f <(

      echo "BEGIN {$begin_block}"
      _awklib

    ) FS=: RS=, \
    arg_direction="$arg_direction" arg_gap="$arg_gap" \
    arg_debug="${_o[debug]}" arg_debug_format="${_o[debug-format]}" \
    arg_scratchpad="${_o[scratchpad]}" arg_list="$arg_list"
  )
  
  if [[ $result =~ ^floating ]]; then

    case "$arg_direction" in
      l|u ) direction=prev   ;;
      r|d ) direction=next   ;;
      *   ) ERX "$arg_direction not valid direction (l|r|u|d)" ;;
    esac

    messy focus $direction

  elif [[ ! $arg_direction && ! ${_o[focus]} ]] || [[ $arg_list ]]; then
    [[ $result ]] && echo "$result"
  elif [[ $result =~ ^[0-9]+ ]]; then

    read -r target_id active_id root_id marked_id <<< "$result"

    [[ $arg_direction ]] && {

      # i3var set viswiz-last-direction "$active_id"
      # manually update i3vars for performance reasons
      variable_name=i3viswiz-last-direction
      new_mark="${variable_name}=$active_id"

      # remove old mark
      [[ $marked_id ]] && {
        old_mark="${variable_name}=$marked_id"
        messy "[con_mark=$old_mark] mark --toggle --add $old_mark"
      }

      messy "[con_id=$root_id] mark --add $new_mark"

    }

    messy "[con_id=$target_id]" focus
  else
    ERX "focus failed. '$result' doesn't make any sense"
  fi
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud
